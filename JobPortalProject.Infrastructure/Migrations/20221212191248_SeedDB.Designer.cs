// <auto-generated />
using System;
using JobPortalProject.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobPortalProject.Infrastructure.Migrations
{
    [DbContext(typeof(JobPortalDbContext))]
    [Migration("20221212191248_SeedDB")]
    partial class SeedDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EmployeeOffer", b =>
                {
                    b.Property<string>("AppliedEmployeesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AppliedOffersId")
                        .HasColumnType("int");

                    b.HasKey("AppliedEmployeesId", "AppliedOffersId");

                    b.HasIndex("AppliedOffersId");

                    b.ToTable("EmployeeOffer");
                });

            modelBuilder.Entity("JobPortalProject.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Java"
                        },
                        new
                        {
                            Id = 2,
                            Title = ".NET"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Javascript"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Python"
                        });
                });

            modelBuilder.Entity("JobPortalProject.Infrastructure.Data.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5425a9af-d8cc-4bef-ab04-dde36a0ea47e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2256c04-9005-41d1-9bcb-c54ce9ab3faf",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDTRBS2sdyxf+1azE108IQIF+EdWRaWO6PkI00tCyudRNBaZavaf79uOLkbiOQbecg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fa52137-09b5-449b-9ae6-ca396630671e",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "fe503507-9126-4d35-a7cc-d4a3c1ee931c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bd7b2ad-8168-4bf6-b8b1-6d76be54659b",
                            Email = "Apple@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "APPLE@GMAIL.COM",
                            NormalizedUserName = "APPLE",
                            PasswordHash = "AQAAAAEAACcQAAAAEAUiciGMVr+JMdVx3kjOJ8SYyKZsIm+sCoZ6oRZnTPo1EnDEV4M389uojHTdXDMqYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bcadc472-69eb-48ac-a682-d01b085a0ff3",
                            TwoFactorEnabled = false,
                            UserName = "Apple"
                        },
                        new
                        {
                            Id = "93df1c24-aabb-46fd-8809-ccd70959c7f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9687da7-4c07-4f1c-a99a-8ade2a94f236",
                            Email = "Microsoft@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MICROSOFT@GMAIL.COM",
                            NormalizedUserName = "MICROSOFT",
                            PasswordHash = "AQAAAAEAACcQAAAAEE/Ou6j/TGSacs85L/lNE7V7LG7T4BwfF0rVycF80q9Oc1CeXf35ojPcgNgAi/vxxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "670e2cb7-aa36-4386-888f-f5a7307690a1",
                            TwoFactorEnabled = false,
                            UserName = "Microsoft"
                        },
                        new
                        {
                            Id = "ea151599-df73-482a-8332-658ac822f086",
                            AccessFailedCount = 0,
                            CV = "I have 3 years of expirence in .NET.",
                            ConcurrencyStamp = "509e2e2b-be77-4f2f-8576-36af1dd53eae",
                            Email = "John@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@GMAIL.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGz8SmdIPKttgxqg2npvgfVDATmeHGoBWWFGwT+2rKz1QrE1nU44spTUr/3+pZ0sYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "082672a8-f8ba-4f5c-a0ac-c0ed7aa3e4cf",
                            TwoFactorEnabled = false,
                            UserName = "John"
                        },
                        new
                        {
                            Id = "24503cd9-443e-44c9-9264-564feeaae46a",
                            AccessFailedCount = 0,
                            CV = "I have no years of expirence in JS. Currently looking for an internship.",
                            ConcurrencyStamp = "89c36f7d-d575-4e92-ab80-6578fd99fd5b",
                            Email = "Mike@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKE@GMAIL.COM",
                            NormalizedUserName = "MIKE",
                            PasswordHash = "AQAAAAEAACcQAAAAEIKcBveYK9FODdOSjpnfDEMt+zr21sEKG2sGMpzZaPD17D8F0tEvKFPZll3+t+7p4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5e73a3f-1e65-41bb-ae94-f12836a58863",
                            TwoFactorEnabled = false,
                            UserName = "Mike"
                        },
                        new
                        {
                            Id = "fc204c28-2af1-4235-a4b8-a3db0576c94b",
                            AccessFailedCount = 0,
                            CV = "I have 6 years of expirence in Python.",
                            ConcurrencyStamp = "9f96e61f-5c9b-40a6-ab2a-5855ae7b7574",
                            Email = "Ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN",
                            PasswordHash = "AQAAAAEAACcQAAAAELY7DhglPjoS37Wypw6JrYyFlmlWk3jnCaauL8ohaF5aVcsAMsq/xCkfjzy6gNluXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4de01b14-bb7c-4fbb-9e86-37cceb219a5c",
                            TwoFactorEnabled = false,
                            UserName = "Ivan"
                        });
                });

            modelBuilder.Entity("JobPortalProject.Infrastructure.Data.Entities.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhoneNumber = "0123456789",
                            UserId = "5425a9af-d8cc-4bef-ab04-dde36a0ea47e"
                        },
                        new
                        {
                            Id = 2,
                            PhoneNumber = "0347648933",
                            UserId = "fe503507-9126-4d35-a7cc-d4a3c1ee931c"
                        },
                        new
                        {
                            Id = 3,
                            PhoneNumber = "04738945673",
                            UserId = "93df1c24-aabb-46fd-8809-ccd70959c7f0"
                        });
                });

            modelBuilder.Entity("JobPortalProject.Infrastructure.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Remote"
                        });
                });

            modelBuilder.Entity("JobPortalProject.Infrastructure.Data.Entities.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SeniorityId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SeniorityId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2022, 12, 12, 21, 12, 48, 302, DateTimeKind.Local).AddTicks(7829),
                            Description = "Junior C# developer. No experience required.",
                            EmployerId = 2,
                            LocationId = 1,
                            Salary = 2000m,
                            SeniorityId = 3,
                            Title = "Junior C#"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2022, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Senior Java developer. Must have 5+ years of experience in Java.",
                            EmployerId = 2,
                            LocationId = 2,
                            Salary = 5000m,
                            SeniorityId = 1,
                            Title = "Java Senior"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2022, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Senior Java developer. Must have 6+ years of experience in C# and JS.",
                            EmployerId = 3,
                            LocationId = 3,
                            Salary = 6000m,
                            SeniorityId = 1,
                            Title = "C# Full-Stack Senior"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CreatedOn = new DateTime(2022, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Back-End Python Developer with 2+ years of expirence.",
                            EmployerId = 3,
                            LocationId = 2,
                            Salary = 3500m,
                            SeniorityId = 2,
                            Title = "Mid Level Python Developer"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2022, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Full-Stack Senior JS Developer. Must be expirienced in Node.Js and Angular/React.Js.",
                            EmployerId = 1,
                            LocationId = 1,
                            Salary = 5400m,
                            SeniorityId = 1,
                            Title = "Senior JS Developer"
                        });
                });

            modelBuilder.Entity("JobPortalProject.Infrastructure.Data.Entities.Seniority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Seniorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = "Senior"
                        },
                        new
                        {
                            Id = 2,
                            Level = "Mid"
                        },
                        new
                        {
                            Id = 3,
                            Level = "Junior"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EmployeeOffer", b =>
                {
                    b.HasOne("JobPortalProject.Infrastructure.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("AppliedEmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalProject.Infrastructure.Data.Entities.Offer", null)
                        .WithMany()
                        .HasForeignKey("AppliedOffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobPortalProject.Infrastructure.Data.Entities.Employer", b =>
                {
                    b.HasOne("JobPortalProject.Infrastructure.Data.Entities.Employee", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobPortalProject.Infrastructure.Data.Entities.Offer", b =>
                {
                    b.HasOne("JobPortalProject.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("Offers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalProject.Infrastructure.Data.Entities.Employer", "Employer")
                        .WithMany("MyOffers")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalProject.Infrastructure.Data.Entities.Location", "Location")
                        .WithMany("Offers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalProject.Infrastructure.Data.Entities.Seniority", "Seniority")
                        .WithMany("Offers")
                        .HasForeignKey("SeniorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Employer");

                    b.Navigation("Location");

                    b.Navigation("Seniority");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JobPortalProject.Infrastructure.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JobPortalProject.Infrastructure.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPortalProject.Infrastructure.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JobPortalProject.Infrastructure.Data.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobPortalProject.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("JobPortalProject.Infrastructure.Data.Entities.Employer", b =>
                {
                    b.Navigation("MyOffers");
                });

            modelBuilder.Entity("JobPortalProject.Infrastructure.Data.Entities.Location", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("JobPortalProject.Infrastructure.Data.Entities.Seniority", b =>
                {
                    b.Navigation("Offers");
                });
#pragma warning restore 612, 618
        }
    }
}
